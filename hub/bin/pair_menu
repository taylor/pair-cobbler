#!/usr/bin/env ruby

script_path = Dir.chdir(File.expand_path(File.dirname(__FILE__))) { Dir.pwd }
apphome_path = Dir.chdir(script_path + '/..') { Dir.pwd }

require 'yaml'

class PairUser
  attr_accessor :name, :local_port, :vpn_addr, :remote_port, :auto, :type, :vpn, :ssh, :ruser
  def initialize(name=nil, port=nil, vpn_addr=nil, ruser=nil)
    @name, @local_port, @vpn_addr, @ruser = name, port, vpn_addr, ruser
    @type = nil
    @auto = false
    @remote_port = 22
  end
end

# TODO: use local DNS rather than VPN IP or just use ssh/.config
# TODO: have ports and info in an external file... maybe looks for all ports in a range 20xxx->21xxx?
users = []

begin
  config = YAML.load_file(apphome_path + "/config.yml")
rescue Errno::ENOENT
  puts "You need a config file!"
  exit 1
end

if config['general'].nil? or config['users'].nil?
  puts "Your config file looks invalid.  Check out the example"
  exit 1
end

IPBASE= config['general']['ipbase'].nil? ? '192.168.100' : config['general']['ipbase']

config['users'].each do |u|
  users << PairUser.new(u['id'], u['port'].to_i, "#{IPBASE}.#{u['octet']}", u['ruser'])
end

# Customers... 
users << PairUser.new("c-sero_comm", 21122, "#{IPBASE}.201", "root")

# TODO: if auto passed as arg then auto connect to first available session?
# the following is not working on OS X
pppaddrs=`/sbin/ifconfig`.grep(/P-t-P:172.25/).collect {|x| x.split[2].split(':')[1]}
sshports=`netstat -nlt`.grep(/127.0.0.1/).collect {|x| x.split[3].split(':')[1].chomp}
panda=pppaddrs + sshports

@available_users=[]

ctypes=[:vpn_addr, :local_port]
ctypes.each do |t|
  panda.each do |pa|
    @available_users << users.collect do |u|
      if (u.send t).to_s == pa.to_s
        u.vpn = true if t == :vpn_addr
        u.ssh = true if t == :local_port
        u
      end
    end.compact
  end
end

#puts "Welcome to the Pairing hub"
welcome_message = %{
                     /)
                  ,.//,
                /` `'` `\
               :         :                                        
              :           :
             :   Welcome   :
            :               :
           :     to the      ;
          :                   :
          ;  Pair Programming ;
          ;                   ;
          :       Hub         :
           \                 /
            `._,.='``'-.,_,.`
              '-._  ~  _.-'
                  `'''`
}
puts "#{welcome_messsage}\n=============================================================================="

@available_users.flatten!.uniq!
if @available_users.empty?
  puts "No pairing sessions available"
  puts "Goodbye"
  puts ""
  exit 0
else  
  puts "Choose a pair session (#), H for help or Q to quit:"
  @available_users.each_with_index do |u,i|
    puts "#{i}: #{u.name}"
  end
end

def get_selection(choices=[])
  begin
    while c = STDIN.read_nonblock(1)
      case c
      when 'Q'
        return c
      when 'H'
        system("stty -raw -echo;stty sane")

        puts "\n=== HELP ==="
        puts "Type the number to connect\r"
        puts "TIP: You need to use ssh-agent to connect to a user.  Use ssh-add ~/.ssh/private_key\r"
        puts "============"
        puts "\n"
        #TODO: remove this duplication
        puts "Choose a pair session (#), H for help or Q to quit:"
        @available_users.each_with_index do |u,i|
          puts "#{i}: #{u.name}"
        end

        return  nil
      else
        # ruby 1.8 only
        x= (c[0].to_i >47 and c[0].to_i < 58) ? c.to_i : c
        return c if choices.include?(x) # kills having non-numeric choices
      end
    end
    false
  rescue Errno::EINTR
    false
  rescue Errno::EAGAIN
    # nothing was ready to be read
    false
  rescue EOFError
    # quit on the end of the input stream
    # (user hit CTRL-D)
    true
  end
end

selection=false
loop do
  system("stty raw -echo")
  break if selection=get_selection((0..@available_users.length-1).to_a)
  sleep 1
end
system("stty -raw -echo;stty sane")
puts ""
if selection == 'Q'
  puts "Goodbye"
  exit 0
end

puts "Good choice"
user=@available_users[selection.to_i]
puts "Attempting to connect to #{user.name}"

if user.vpn
  host=user.vpn_addr
  port=user.remote_port
else
  host=user.name
  #host='localhost'
  port=user.local_port
end
ruser=user.ruser

puts "ssh -p #{port} #{ruser}@#{host}"
system("ssh -p #{port} #{ruser}@#{host}")
exit 0
